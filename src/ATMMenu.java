
import adtm.DBConnection;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Desktop
 */
public class ATMMenu extends javax.swing.JFrame {
    int userId;
    String userName;
    
    



    /**
     * Creates new form ATMMENU
     */
  public ATMMenu(int id, String name) {
    userId = id;
    userName = name;

    setTitle("ATM Menu");
    initComponents();
    lblWelcome.setText("Welcome, " + userName);

    setLocationRelativeTo(null); // center the window
    setVisible(true); // ✅ THIS IS CRITICAL if you're not calling .setVisible() externally
}

       /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblWelcome = new javax.swing.JLabel();
        btnCheck = new javax.swing.JButton();
        btnDeposit = new javax.swing.JButton();
        btnWithdraw = new javax.swing.JButton();
        btnLogout = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lblWelcome.setText("jLabel1");

        btnCheck.setText("Check Balance");
        btnCheck.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCheckActionPerformed(evt);
            }
        });

        btnDeposit.setText("Deposit");
        btnDeposit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDepositActionPerformed(evt);
            }
        });

        btnWithdraw.setText("Withdraw");
        btnWithdraw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWithdrawActionPerformed(evt);
            }
        });

        btnLogout.setText("Logout");
        btnLogout.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLogoutActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(141, 141, 141)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblWelcome, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(btnCheck)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(btnDeposit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnWithdraw, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btnLogout, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(150, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(lblWelcome)
                .addGap(31, 31, 31)
                .addComponent(btnCheck)
                .addGap(18, 18, 18)
                .addComponent(btnDeposit)
                .addGap(18, 18, 18)
                .addComponent(btnWithdraw)
                .addGap(18, 18, 18)
                .addComponent(btnLogout)
                .addContainerGap(57, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCheckActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCheckActionPerformed
        try (Connection con = DBConnection.connect()) {
            if (userId == 0) {
                JOptionPane.showMessageDialog(this, "You must log in first.");
                return;
            }

            PreparedStatement ps = con.prepareStatement("SELECT balance FROM accounts WHERE id = ?");
            ps.setInt(1, userId);
            ResultSet rs = ps.executeQuery();

            if (rs.next()) {
                double balance = rs.getDouble("balance");
                JOptionPane.showMessageDialog(this, "Balance: ₱" + balance);
            } else {
                JOptionPane.showMessageDialog(this, "Account not found.");
            }

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }
               // TODO add your handling code here:
    }//GEN-LAST:event_btnCheckActionPerformed

    private void btnDepositActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDepositActionPerformed
       String amtStr = JOptionPane.showInputDialog(this, "Enter deposit amount:");

        if (amtStr == null) {
            // User pressed Cancel
            JOptionPane.showMessageDialog(this, "Deposit cancelled.");
            return;
        }

        // ✅ Now safe to trim because it's not null
        amtStr = amtStr.trim();

        if (amtStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Amount cannot be empty.");
            return;
        }

        try {
            double amount = Double.parseDouble(amtStr);

            if (amount <= 0) {
                JOptionPane.showMessageDialog(this, "Amount must be greater than 0.");
                return;
            }

            try (Connection con = DBConnection.connect()) {
                PreparedStatement ps = con.prepareStatement("UPDATE accounts SET balance = balance + ? WHERE id = ?");
                ps.setDouble(1, amount);
                ps.setInt(2, userId);
                ps.executeUpdate();
                JOptionPane.showMessageDialog(this, "Deposited ₱" + amount);
            }

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid input. Please enter a number.");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Database Error: " + ex.getMessage());
        }

    }//GEN-LAST:event_btnDepositActionPerformed

    private void btnWithdrawActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWithdrawActionPerformed
        // TODO add your handling code here:
       String amtStr = JOptionPane.showInputDialog(this, "Enter withdraw amount:");

        if (amtStr == null) {
            // User cancelled the input
            JOptionPane.showMessageDialog(this, "Withdrawal cancelled.");
            return;
        }

        amtStr = amtStr.trim();

        if (amtStr.isEmpty()) {
            JOptionPane.showMessageDialog(this, "Withdrawal amount cannot be empty.");
            return;
        }

        try {
            double amount = Double.parseDouble(amtStr);

            if (amount <= 0) {
                JOptionPane.showMessageDialog(this, "Amount must be greater than 0.");
                return;
            }

            try (Connection con = DBConnection.connect()) {
                // Check current balance
                PreparedStatement check = con.prepareStatement("SELECT balance FROM accounts WHERE id = ?");
                check.setInt(1, userId);
                ResultSet rs = check.executeQuery();

                if (rs.next()) {
                    double balance = rs.getDouble("balance");

                    if (balance >= amount) {
                        // Perform withdrawal
                        PreparedStatement ps = con.prepareStatement("UPDATE accounts SET balance = balance - ? WHERE id = ?");
                        ps.setDouble(1, amount);
                        ps.setInt(2, userId);
                        ps.executeUpdate();
                        JOptionPane.showMessageDialog(this, "Successfully withdrew ₱" + amount);
                    } else {
                        JOptionPane.showMessageDialog(this, "Insufficient funds.\nYour current balance is ₱" + balance);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Account not found.");
                }
            }

        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, "Invalid input. Please enter a valid number.");
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage());
        }

    }//GEN-LAST:event_btnWithdrawActionPerformed

    private void btnLogoutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLogoutActionPerformed
        // TODO add your handling code here:
        
        new ATMLogin().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnLogoutActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ATMMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ATMMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ATMMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ATMMenu.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new ATMLogin().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCheck;
    private javax.swing.JButton btnDeposit;
    private javax.swing.JButton btnLogout;
    private javax.swing.JButton btnWithdraw;
    private javax.swing.JLabel lblWelcome;
    // End of variables declaration//GEN-END:variables
}
